package eu.europa.ec.cipa.bdmsl.ws.soap.impl;

import ec.services.wsdl.bdmsl.data._1.ListParticipantsType;
import ec.services.wsdl.bdmsl.data._1.PrepareChangeCertificateType;
import ec.services.wsdl.bdmsl.data._1.SMPAdvancedServiceForParticipantType;
import eu.europa.ec.cipa.bdmsl.common.bo.ParticipantBO;
import eu.europa.ec.cipa.bdmsl.common.bo.ParticipantListBO;
import eu.europa.ec.cipa.bdmsl.common.bo.PrepareChangeCertificateBO;
import eu.europa.ec.cipa.bdmsl.common.exception.BadRequestException;
import eu.europa.ec.cipa.bdmsl.service.ICipaService;
import eu.europa.ec.cipa.bdmsl.service.IManageCertificateService;
import eu.europa.ec.cipa.bdmsl.service.IManageParticipantIdentifierService;
import eu.europa.ec.cipa.bdmsl.util.LogEvents;
import eu.europa.ec.cipa.bdmsl.ws.soap.*;
import eu.europa.ec.cipa.common.exception.Severity;
import eu.europa.ec.cipa.common.exception.TechnicalException;
import ma.glasnost.orika.MapperFactory;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.busdox.servicemetadata.locator._1.FaultType;
import org.busdox.servicemetadata.locator._1.ObjectFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import org.springframework.web.context.request.RequestContextHolder;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;

/**
 * This class was generated by Apache CXF 3.0.4
 * 2015-06-11T17:09:43.364+02:00
 * Generated source version: 3.0.4
 * 
 */
@Service
@WebService(targetNamespace = "ec:services:wsdl:BDMSL:1.0", name = "BDMSLCipaServiceSoap", endpointInterface = "eu.europa.ec.cipa.bdmsl.ws.soap.ICipaServiceWS")
@SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
public class CipaServiceWSImpl extends AbstractWSImpl implements ICipaServiceWS {

    @Autowired
    private IManageParticipantIdentifierService manageParticipantIdentifierService;

    @Autowired
    private IManageCertificateService manageCertificateService;

    @Autowired
    private ICipaService cipaService;

    @Autowired
    private MapperFactory mapperFactory;

    @Override
    @WebMethod(operationName = "IsAlive", action = "ec:services:wsdl:BDMSL:1.0:isAliveIn")
    public void isAlive(){
        loggingService.info("Calling CipaServiceWSImpl.isAlive");
    }

    @Override
    @WebMethod(operationName = "CreateParticipantIdentifier", action = "ec:services:wsdl:BDMSL:1.0:createParticipantIdentifierIn")
    public void createParticipantIdentifier(
            @WebParam(partName = "participantType", name = "SMPAdvancedServiceForParticipantService", targetNamespace = "ec:services:wsdl:BDMSL:data:1.0")
            SMPAdvancedServiceForParticipantType participantType
    ) throws InternalErrorFault, NotFoundFault, UnauthorizedFault, BadRequestFault {
        loggingService.info("Calling CipaServiceWSImpl.createParticipantIdentifier with participantType=" + ToStringBuilder.reflectionToString(participantType));
        try {
            if (participantType == null) {
                throw new BadRequestException("The input values must not be null");
            }
            ParticipantBO participantBO = mapperFactory.getMapperFacade().map(participantType, ParticipantBO.class);
            manageParticipantIdentifierService.create(participantBO);
            loggingService.businessLog(LogEvents.BUS_PARTICIPANT_CREATED, participantBO.getParticipantId());
        } catch (Exception exc) {
            // convert the exception to the associated SOAP fault
            loggingService.businessLog(Severity.ERROR, LogEvents.BUS_PARTICIPANT_CREATION_FAILED, ToStringBuilder.reflectionToString(participantType));
            loggingService.error(exc.getMessage(), exc);
            handleException(exc);
        }
    }

    @Override
    @WebMethod(operationName = "PrepareChangeCertificate", action = "ec:services:wsdl:BDMSL:1.0:prepareChangeCertificateIn")
    public void prepareChangeCertificate(
            @WebParam(partName = "prepareChangeCertificateType", name = "PrepareChangeCertificate", targetNamespace = "ec:services:wsdl:BDMSL:data:1.0")
            PrepareChangeCertificateType prepareChangeCertificateType
    ) throws InternalErrorFault, NotFoundFault, UnauthorizedFault, BadRequestFault {
        loggingService.info("Calling CipaServiceWSImpl.prepareChangeCertificate with prepareChangeCertificateType=" + ToStringBuilder.reflectionToString(prepareChangeCertificateType));
        try {
            if (prepareChangeCertificateType == null) {
                throw new BadRequestException("The input values must not be null");
            }
            PrepareChangeCertificateBO prepareChangeCertificateBO = mapperFactory.getMapperFacade().map(prepareChangeCertificateType, PrepareChangeCertificateBO.class);
            manageCertificateService.prepareChangeCertificate(prepareChangeCertificateBO);
            loggingService.businessLog(LogEvents.BUS_CERTIFICATE_CHANGED, prepareChangeCertificateBO.getCurrentCertificate().getCertificateId());
        } catch (Exception exc) {
            // convert the exception to the associated SOAP fault
            loggingService.businessLog(Severity.ERROR, LogEvents.BUS_CERTIFICATE_CHANGE_FAILED, SecurityContextHolder.getContext().getAuthentication().getName());
            loggingService.error(exc.getMessage(), exc);
            handleException(exc);
        }
    }

    @Override
    @WebMethod(operationName = "ClearCache", action = "ec:services:wsdl:BDMSL:1.0:clearCacheIn")
    public void clearCache() throws InternalErrorFault {
        loggingService.info("Calling CipaServiceWSImpl.clearCache");
        try {
            cipaService.clearCache();
            loggingService.info("Call to CipaServiceWSImpl.clearCache ended successfully");
        } catch (TechnicalException exc) {
            final ObjectFactory objectFactory = new ObjectFactory();
            String sessionId = RequestContextHolder.currentRequestAttributes().getSessionId();
            final FaultType faultInfo = objectFactory.createFaultType();
            faultInfo.setFaultMessage(exc.getMessage());
            throw new InternalErrorFault(sessionId, faultInfo, exc);
        }
    }

    @Override
    @WebResult(name = "ListParticipants", targetNamespace = "ec:services:wsdl:BDMSL:data:1.0", partName = "messagePart")
    @WebMethod(operationName = "ListParticipants", action = "ec:services:wsdl:BDMSL:1.0:listParticipantsIn")
    public ListParticipantsType listParticipants() throws InternalErrorFault, UnauthorizedFault {
        ListParticipantsType result = null;
        loggingService.info("Calling CipaServiceWSImpl.listParticipants");
        try {
            ParticipantListBO participantListBO = manageParticipantIdentifierService.list();
            result = mapperFactory.getMapperFacade().map(participantListBO, ListParticipantsType.class);
            loggingService.businessLog(LogEvents.BUS_LIST_ALL_PARTICIPANT_SUCCESS);
        } catch (Exception exc) {
            // convert the exception to the associated SOAP fault
            loggingService.businessLog(Severity.ERROR, LogEvents.BUS_LIST_ALL_PARTICIPANT_FAILED);
            loggingService.error(exc.getMessage(), exc);
            try {
                handleException(exc);
            } catch (NotFoundFault notFoundFault) {
                // never happens
                throw new InternalErrorFault(RequestContextHolder.currentRequestAttributes().getSessionId(), notFoundFault.getFaultInfo(), notFoundFault);
            } catch (BadRequestFault badRequestFault) {
                // never happens
                throw new InternalErrorFault(RequestContextHolder.currentRequestAttributes().getSessionId(), badRequestFault.getFaultInfo(), badRequestFault);
            }
        }
        return result;
    }
}
