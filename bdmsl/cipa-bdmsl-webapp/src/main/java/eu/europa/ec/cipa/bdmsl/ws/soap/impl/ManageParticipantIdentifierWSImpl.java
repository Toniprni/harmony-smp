package eu.europa.ec.cipa.bdmsl.ws.soap.impl;

import eu.europa.ec.cipa.bdmsl.common.bo.MigrationRecordBO;
import eu.europa.ec.cipa.bdmsl.common.bo.PageRequestBO;
import eu.europa.ec.cipa.bdmsl.common.bo.ParticipantBO;
import eu.europa.ec.cipa.bdmsl.common.bo.ParticipantListBO;
import eu.europa.ec.cipa.bdmsl.common.exception.BadRequestException;
import eu.europa.ec.cipa.bdmsl.service.IManageParticipantIdentifierService;
import eu.europa.ec.cipa.bdmsl.util.LogEvents;
import eu.europa.ec.cipa.bdmsl.ws.soap.*;
import eu.europa.ec.cipa.common.exception.Severity;
import ma.glasnost.orika.MapperFactory;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.busdox.servicemetadata.locator._1.MigrationRecordType;
import org.busdox.servicemetadata.locator._1.PageRequestType;
import org.busdox.servicemetadata.locator._1.ParticipantIdentifierPageType;
import org.busdox.servicemetadata.locator._1.ServiceMetadataPublisherServiceForParticipantType;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;

/**
 * This class was generated by Apache CXF 3.0.4
 * 2015-06-12T13:31:24.829+02:00
 * Generated source version: 3.0.4
 */
@Service
@WebService(targetNamespace = "http://busdox.org/serviceMetadata/ManageBusinessIdentifierService/1.0/", name = "ManageBusinessIdentifierServiceSoap", endpointInterface = "eu.europa.ec.cipa.bdmsl.ws.soap.IManageParticipantIdentifierWS")
@SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
public class ManageParticipantIdentifierWSImpl extends AbstractWSImpl implements IManageParticipantIdentifierWS {

    @Autowired
    private IManageParticipantIdentifierService manageParticipantIdentifierService;

    @Autowired
    private MapperFactory mapperFactory;

    @Override
    @WebResult(name = "ParticipantIdentifierPage", targetNamespace = "http://busdox.org/serviceMetadata/locator/1.0/", partName = "messagePart")
    @WebMethod(operationName = "List", action = "http://busdox.org/serviceMetadata/ManageBusinessIdentifierService/1.0/         :listIn")
    public ParticipantIdentifierPageType list(
            @WebParam(partName = "pageRequestType", name = "PageRequest", targetNamespace = "http://busdox.org/serviceMetadata/locator/1.0/")
            PageRequestType pageRequestType
    ) throws NotFoundFault, InternalErrorFault, UnauthorizedFault, BadRequestFault {
        loggingService.info("Calling ManageParticipantIdentifierWSImpl.list with pageRequestType=" + ToStringBuilder.reflectionToString(pageRequestType));
        ParticipantIdentifierPageType result = null;
        try {
            if (pageRequestType == null) {
                throw new BadRequestException("The input values must not be null");
            }

            // convert input from JAXB to BO
            PageRequestBO pageRequestBO = mapperFactory.getMapperFacade().map(pageRequestType, PageRequestBO.class);

            // call the service layer
            ParticipantListBO resultParticipantBOList = manageParticipantIdentifierService.list(pageRequestBO);
            loggingService.businessLog(LogEvents.BUS_PARTICIPANT_LIST, pageRequestBO.getSmpId());

            // convert output from BO to JAXB
            result = mapperFactory.getMapperFacade().map(resultParticipantBOList, ParticipantIdentifierPageType.class);
        } catch (Exception exc) {
            // convert the exception to the associated SOAP fault
            loggingService.businessLog(Severity.ERROR, LogEvents.BUS_PARTICIPANT_LIST_FAILED, ToStringBuilder.reflectionToString(pageRequestType));
            loggingService.error(exc.getMessage(), exc);
            handleException(exc);
        }
        return result;
    }

    @Override
    @WebMethod(operationName = "Create", action = "http://busdox.org/serviceMetadata/ManageBusinessIdentifierService/1.0/         :createIn")
    public void create(
            @WebParam(partName = "participantType", name = "CreateParticipantIdentifier", targetNamespace = "http://busdox.org/serviceMetadata/locator/1.0/")
            ServiceMetadataPublisherServiceForParticipantType participantType
    ) throws NotFoundFault, InternalErrorFault, UnauthorizedFault, BadRequestFault {
        loggingService.info("Calling ManageParticipantIdentifierWSImpl.create with participantType=" + ToStringBuilder.reflectionToString(participantType));
        try {
            if (participantType == null) {
                throw new BadRequestException("The input values must not be null");
            }
            ParticipantBO participantBO = mapperFactory.getMapperFacade().map(participantType, ParticipantBO.class);
            manageParticipantIdentifierService.create(participantBO);
            loggingService.businessLog(LogEvents.BUS_PARTICIPANT_CREATED, participantBO.getParticipantId());
        } catch (Exception exc) {
            // convert the exception to the associated SOAP fault
            loggingService.businessLog(Severity.ERROR, LogEvents.BUS_PARTICIPANT_CREATION_FAILED, ToStringBuilder.reflectionToString(participantType));
            loggingService.error(exc.getMessage(), exc);
            handleException(exc);
        }
    }

    @Override
    @WebMethod(operationName = "PrepareToMigrate", action = "http://busdox.org/serviceMetadata/ManageBusinessIdentifierService/1.0/         :prepareMigrateIn")
    public void prepareToMigrate(
            @WebParam(partName = "prepareMigrateType", name = "PrepareMigrationRecord", targetNamespace = "http://busdox.org/serviceMetadata/locator/1.0/")
            MigrationRecordType prepareMigrateType
    ) throws NotFoundFault, InternalErrorFault, UnauthorizedFault, BadRequestFault {
        loggingService.info("Calling ManageParticipantIdentifierWSImpl.prepareToMigrate with prepareMigrateType=" + ToStringBuilder.reflectionToString(prepareMigrateType));
        try {
            if (prepareMigrateType == null) {
                throw new BadRequestException("The input values must not be null");
            }
            MigrationRecordBO prepareToMigrateBO = mapperFactory.getMapperFacade().map(prepareMigrateType, MigrationRecordBO.class);
            prepareToMigrateBO.setOldSmpId(prepareMigrateType.getServiceMetadataPublisherID());
            prepareToMigrateBO.setNewSmpId(null);
            manageParticipantIdentifierService.prepareToMigrate(prepareToMigrateBO);
            loggingService.businessLog(LogEvents.BUS_PREPARE_TO_MIGRATE_SUCCESS, prepareToMigrateBO.toString());
        } catch (Exception exc) {
            // convert the exception to the associated SOAP fault
            loggingService.businessLog(Severity.ERROR, LogEvents.BUS_PREPARE_TO_MIGRATE_FAILED, ToStringBuilder.reflectionToString(prepareMigrateType));
            loggingService.error(exc.getMessage(), exc);
            handleException(exc);
        }
    }

    @Override
    @WebMethod(operationName = "Migrate", action = "http://busdox.org/serviceMetadata/ManageBusinessIdentifierService/1.0/         :migrateIn")
    public void migrate(
            @WebParam(partName = "migrateType", name = "CompleteMigrationRecord", targetNamespace = "http://busdox.org/serviceMetadata/locator/1.0/")
            MigrationRecordType migrateType
    ) throws NotFoundFault, InternalErrorFault, UnauthorizedFault, BadRequestFault {
        loggingService.info("Calling ManageParticipantIdentifierWSImpl.migrate with migrateType=" + ToStringBuilder.reflectionToString(migrateType));
        try {
            if (migrateType == null) {
                throw new BadRequestException("The input values must not be null");
            }
            MigrationRecordBO migrateBO = mapperFactory.getMapperFacade().map(migrateType, MigrationRecordBO.class);
            migrateBO.setNewSmpId(migrateType.getServiceMetadataPublisherID());
            migrateBO.setOldSmpId(null);
            manageParticipantIdentifierService.migrate(migrateBO);
            loggingService.businessLog(LogEvents.BUS_MIGRATE_SUCCESS, migrateBO.toString());
        } catch (Exception exc) {
            // convert the exception to the associated SOAP fault
            loggingService.businessLog(Severity.ERROR, LogEvents.BUS_MIGRATE_FAILED, ToStringBuilder.reflectionToString(migrateType));
            loggingService.error(exc.getMessage(), exc);
            handleException(exc);
        }
    }

    @Override
    @WebMethod(operationName = "DeleteList", action = "http://busdox.org/serviceMetadata/ManageBusinessIdentifierService/1.0/         :deleteListIn")
    public void deleteList(
            @WebParam(partName = "participantTypeList", name = "DeleteList", targetNamespace = "http://busdox.org/serviceMetadata/locator/1.0/")
            ParticipantIdentifierPageType participantTypeList
    ) throws NotFoundFault, InternalErrorFault, UnauthorizedFault, BadRequestFault {
        loggingService.info("Calling ManageParticipantIdentifierWSImpl.deleteList with participantTypeList=" + ToStringBuilder.reflectionToString(participantTypeList));
        try {
            if (participantTypeList == null) {
                throw new BadRequestException("The input values must not be null");
            }
            ParticipantListBO participantListBO = mapperFactory.getMapperFacade().map(participantTypeList, ParticipantListBO.class);
            manageParticipantIdentifierService.deleteList(participantListBO);
            loggingService.businessLog(LogEvents.BUS_PARTICIPANT_LIST_DELETED, participantListBO.toString());
        } catch (Exception exc) {
            // convert the exception to the associated SOAP fault
            loggingService.businessLog(Severity.ERROR, LogEvents.BUS_PARTICIPANT_LIST_DELETION_FAILED, ToStringBuilder.reflectionToString(participantTypeList));
            loggingService.error(exc.getMessage(), exc);
            handleException(exc);
        }
    }

    @Override
    @WebMethod(operationName = "CreateList", action = "http://busdox.org/serviceMetadata/ManageBusinessIdentifierService/1.0/         :createListIn")
    public void createList(
            @WebParam(partName = "participantTypeList", name = "CreateList", targetNamespace = "http://busdox.org/serviceMetadata/locator/1.0/")
            ParticipantIdentifierPageType participantTypeList
    ) throws NotFoundFault, InternalErrorFault, UnauthorizedFault, BadRequestFault {
        loggingService.info("Calling ManageParticipantIdentifierWSImpl.createList with participantTypeList=" + ToStringBuilder.reflectionToString(participantTypeList));
        try {
            if (participantTypeList == null) {
                throw new BadRequestException("The input values must not be null");
            }
            ParticipantListBO participantListBO = mapperFactory.getMapperFacade().map(participantTypeList, ParticipantListBO.class);
            manageParticipantIdentifierService.createList(participantListBO);
            loggingService.businessLog(LogEvents.BUS_PARTICIPANT_LIST_CREATED, participantListBO.toString());
        } catch (Exception exc) {
            // convert the exception to the associated SOAP fault
            loggingService.businessLog(Severity.ERROR, LogEvents.BUS_PARTICIPANT_LIST_CREATION_FAILED, ToStringBuilder.reflectionToString(participantTypeList));
            loggingService.error(exc.getMessage(), exc);
            handleException(exc);
        }
    }

    @Override
    @WebMethod(operationName = "Delete", action = "http://busdox.org/serviceMetadata/ManageBusinessIdentifierService/1.0/         :deleteIn")
    public void delete(
            @WebParam(partName = "messagePart", name = "DeleteParticipantIdentifier", targetNamespace = "http://busdox.org/serviceMetadata/locator/1.0/")
            ServiceMetadataPublisherServiceForParticipantType participantType
    ) throws NotFoundFault, InternalErrorFault, UnauthorizedFault, BadRequestFault {
        loggingService.info("Calling ManageParticipantIdentifierWSImpl.delete with participantType=" + ToStringBuilder.reflectionToString(participantType));
        try {
            if (participantType == null) {
                throw new BadRequestException("The input values must not be null");
            }
            ParticipantBO participantBO = mapperFactory.getMapperFacade().map(participantType, ParticipantBO.class);
            manageParticipantIdentifierService.delete(participantBO);
            loggingService.businessLog(LogEvents.BUS_PARTICIPANT_DELETED, participantBO.toString());
        } catch (Exception exc) {
            // convert the exception to the associated SOAP fault
            loggingService.businessLog(Severity.ERROR, LogEvents.BUS_PARTICIPANT_DELETION_FAILED, ToStringBuilder.reflectionToString(participantType));
            loggingService.error(exc.getMessage(), exc);
            handleException(exc);
        }
    }
}
