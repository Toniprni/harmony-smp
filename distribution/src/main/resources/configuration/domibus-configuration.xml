<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2015 e-CODEX Project
  ~
  ~ Licensed under the EUPL, Version 1.1 or â€“ as soon they
  ~ will be approved by the European Commission - subsequent
  ~ versions of the EUPL (the "Licence");
  ~ You may not use this work except in compliance with the
  ~ Licence.
  ~ You may obtain a copy of the Licence at:
  ~ http://ec.europa.eu/idabc/eupl5
  ~ Unless required by applicable law or agreed to in
  ~ writing, software distributed under the Licence is
  ~ distributed on an "AS IS" basis,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
  ~ express or implied.
  ~ See the Licence for the specific language governing
  ~ permissions and limitations under the Licence.
  -->

<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:sec="http://www.springframework.org/schema/security"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util.xsd
        http://www.springframework.org/schema/security
	    http://www.springframework.org/schema/security/spring-security-3.2.xsd">

    <import resource="file:///${domibus.config.location}/backend-common-configuration.xml"/>

    <!-- Passwordcallback for private key access. By default a simple
         implementation which stores the password in plaintext is used.
         THIS IS NOT SAFE FOR PRODUCTION PURPOSES please switch to
         your own implementation
    -->
    <bean id="keystorePasswordCallback"
          class="eu.domibus.ebms3.security.SimpleKeystorePasswordCallback">
        <!-- Map with "alias" as key and "password" as value.
             This map will be used by the passwordcallback to
             retrieve the private key password for a given alias -->
        <property name="passwordStore">
            <util:map>
                <entry key="testResponder" value="test"/>
            </util:map>
        </property>
    </bean>

    <!-- Properties for keystore with private key -->
    <util:properties id="keystoreProperties">
        <!-- The crypto provider to be used -->
        <prop key="org.apache.ws.security.crypto.provider">
            org.apache.ws.security.components.crypto.Merlin
        </prop>
        <!-- Type of the used keystore -->
        <prop key="org.apache.ws.security.crypto.merlin.keystore.type">jks
        </prop>
        <!-- The password used to load the keystore -->
	<prop key="org.apache.ws.security.crypto.merlin.keystore.private.password">test</prop>
		<!-- The password used to load the keystore -->
        <prop key="org.apache.ws.security.crypto.merlin.keystore.password">test</prop>
        <!-- The default keystore alias to use, if none is specified. -->
        <prop key="org.apache.ws.security.crypto.merlin.keystore.alias">exampleResponder</prop>
        <!-- The location of the keystore -->
        <prop key="org.apache.ws.security.crypto.merlin.file">
            ${jboss.server.base.dir}/certificates/keystore.jks
        </prop>
    </util:properties>

    <!-- Properties for truststore with public keys for the partners -->
    <util:properties id="truststoreProperties">
        <!-- The crypto provider to be used -->
        <prop key="org.apache.ws.security.crypto.provider">
            org.apache.ws.security.components.crypto.Merlin
        </prop>
        <!-- Type of the used keystore -->
        <prop key="org.apache.ws.security.crypto.merlin.keystore.type">jks
        </prop>
        <!-- The password used to load the keystore -->
        <prop key="org.apache.ws.security.crypto.merlin.keystore.password">
            test
        </prop>
        <!-- The location of the keystore -->
        <prop key="org.apache.ws.security.crypto.merlin.file">
            ${jboss.server.base.dir}/certificates/truststore.jks
        </prop>
    </util:properties>

    <!-- message sender that is being executed by the senderworker -->
    <bean id="messageSender" class="eu.domibus.ebms3.sender.MessageSender"/>

    <!-- quartz job for the  -->
    <bean id="senderWorkerJob"
          class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="jobClass" value="eu.domibus.ebms3.sender.SenderWorker"/>
        <property name="durability" value="true"/>
    </bean>

    <bean id="senderWorkerTrigger"
          class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="senderWorkerJob"/>
        <property name="cronExpression" value="${domibus.msh.sender.cron}"/>
    </bean>

    <!-- customizable list of triggers to be executed by quartz -->
    <bean id="userdefinedTriggerList"
          class="org.springframework.beans.factory.config.ListFactoryBean">
        <property name="sourceList">
            <list>
                <ref bean="senderWorkerTrigger"/>
            </list>
        </property>
    </bean>

    <!-- Administration GUI user credentials-->
    <bean name="bcryptEncoder"
          class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

    <sec:authentication-manager>
        <sec:authentication-provider>
            <sec:password-encoder ref="bcryptEncoder"/>
            <sec:user-service>
                <sec:user name="user" password="$2a$10$HApapHvDStTEwjjneMCvxuqUKVyycXZRfXMwjU0rRmaWMsjWQp/Zu"
                          authorities="ROLE_USER"/>
                <sec:user name="admin" password="$2a$10$5uKS72xK2ArGDgb2CwjYnOzQcOmB7CPxK6fz2MGcDBM9vJ4rUql36"
                          authorities="ROLE_USER, ROLE_ADMIN"/>
            </sec:user-service>
        </sec:authentication-provider>
    </sec:authentication-manager>
</beans>
