@use '@angular/material' as mat;
@use 'sass:map';
@import '@angular/material/theming';


//The core mixin must be included exactly once for your application, even if you define multiple themes.
// Including the core mixin multiple times will result in duplicate CSS in your application.
@include mat.core();

$smp-primary: mat.define-palette(mat.$green-palette);
$smp-accent: mat.define-palette(mat.$light-green-palette);
// The "warn" palette is optional and defaults to red if not specified.
$smp-warn: mat.define-palette(mat.$red-palette);

// The "warn" palette is optional and defaults to red if not specified.
$smp-theme: mat.define-light-theme((
  color: (
    primary: $smp-primary,
    accent: $smp-accent,
    warn: $smp-warn,
  ),
  typography: mat.define-typography-config(),
  density: 0,
));

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include mat.all-component-themes($smp-theme);


/// Gets the CSS property and it's computed color value
/// @param {String} $property The css property to set. ex: background, color, background-color, border-color etc.
/// @param {String} $color Theme color. Accepted values are: primary(default), accent, or warn.
/// @param {String | Number} $hue The hue from the palette to use. If this is a value between 0 and 1, it will be treated as opacity. Ex values: 500, 500-contrast, darker, darker-contrast
/// @returns {CssProperty} CSS property with it's computed value for the both light and dark themes.
@mixin set-property-theme-color($property: null, $color: primary, $hue: null) {
  // Get the color config from the theme.
  $color-value: get-theme-color($color, $hue);
  #{$property}: $color-value;
}

@mixin set-property-theme-shadow-color($property: null, $color: primary, $hue: null) {
  // Get the color config from the theme.
  $color-value: get-theme-color($color, $hue);
  #{$property}: 1px 1px $color-value;
}

@function get-theme-color($color: primary, $hue: null) {
  // Get the color config from the theme.
  $color-config: mat.get-color-config($smp-theme);
  // Get the required color palette from the color-config.
  $color-palette: map.get($color-config, $color);
  @if $hue != null {
    // Finally get the desired color with the specified hue.
    @return mat.get-color-from-palette($color-palette, $hue);
  } @else {
    // Finally get the desired color with the specified hue.
    @return mat.get-color-from-palette($color-palette);
  }
}
